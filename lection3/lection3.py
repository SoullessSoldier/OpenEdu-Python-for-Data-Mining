#Lection3
#Вещественные числа и строки
#Обычное деление вещественных чисел через /
#основная проблема - с точностью.
#сравнение двух вещественных чисел:
# abs(a-b)<0.000001
#напрямую 1.0 не равен 2.0-1.0
#у вещественных числе есть ограничение на макс.значение
#представление 1.579e+100
#3.1 Вещественные числа
#
#В этой задаче вам нужно написать программу, которая считывает два вещественных числа и выведет их сумму (подвохов в ней нет). Числа задаются по одному в строке.
#Напомним, что для преобразования строки в вещественное число используется функция float
#
###
#a=float(input())
#b=float(input())
#print(a+b)
###
#
#Еще одна задача без подвоха :)
#Вам необходимо написать программу, которая считает вещественные числа A и B и выведет результат деления A на B.
#Напомним, что вещественное деление делается с помощью операции / (в отличие от деления нацело, которое делается с помощью операции //).
#
###
#a=float(input())
#b=float(input())
#print(a/b)
###
#
#3.2 Округление вещественных чисел
#Отбрасывание вещественной части, округление в сторону 0, для положит.чисел - вниз, для отриц.чисел - вверх
#x=float(input())
#print(int(x))
#
#Функция round (округление по матем.правилам)
#x=float(input())
#print(round(x))
#Полуцелое число округляется в сторону ближайшего четного (подход евро-науки)
# round(1.5) = 2 и round(2.5) = 2
#В российской школе полуцелое число должно округлиться до целой части
##
#доп.библиотека
#import math
#или
#from math import ceil
#x=float(input())
#print(math.floor(x))# - округление вниз, для отрицат чисел - округление вверх
#print(math.ceil(x))# - округление вверх, для отрицат. чисел - округление вниз
##
#print(x**0.5) или print(math.sqrt(x))
#
#
#Дано положительное вещественное число X. Выведите его дробную часть.
####
#a = float(input())
#b = a % 1
#x = round(b, 3)
#if x != 0:
# print (x)
#else:
# print(0)
####
#
#По российский правилам числа округляются до ближайшего целого числа, а если дробная часть числа равна 0.5, то число округляется вверх.
#Дано неотрицательное вещественное число X, округлите его по этим правилам.
#Обратите внимание, что функция round не подходит для этой задачи!
#
###
#from math import floor,ceil
#a=float(input())
#b=a%1
#if b<0.5:
#    print(int(floor(a))) #округляем вниз
#else:
#    print(int(ceil(a))) #иначе крутим вверх
###
#
#Процентная ставка по вкладу составляет P процентов годовых, которые прибавляются к сумме вклада. Вклад составляет X рублей Y копеек. Определите размер вклада через год.
#Программа получает на вход целые числа P, X, Y.
#Программа должна вывести два числа: величину вклада через год в рублях и копейках. Дробная часть копеек отбрасывается.
###
#P=int(input())
#X=int(input())
#Y=int(input())
#S=100*X+Y
#S=S*(100+P)/100
#print(int(S//100),int(S%100))
###
#
#3.3 Срезы строк
#
#Напоминание про работу со строками:

#len(s) - определить длину строки s
#s[i] - получить i-ый символ строки (нумерация с нуля, i - положительное), в случае отрицательного i нумерация идет справа-налево, начиная с -1, например, s[-1] - это последний символ строки
#s[i:j] - получить все символы с i-го включительно по j-ый не включительно
#s[:i] - все символы до i-го не включительно
#s[i:] - все символы, начиная с i-го включительно
#s[i:j:k] - все символы с i-го включитель по j-ый не включительно с шагом k, если шаг отрицательный, то i должно указывать на символ стоящий правее, чем j
#
#Дана строка.
#Сначала выведите третий символ этой строки (считая, что нумерация символов начинается с 1).
#Во второй строке выведите предпоследний символ этой строки.
#В третьей строке выведите первые пять символов этой строки.
#В четвертой строке выведите всю строку, кроме последних двух символов.
#В пятой строке выведите все символы с четными индексами (считая, что индексация начинается с 0).
#В шестой строке выведите все символы с нечетными индексами (считая, что индексация начинается с 0).
#В седьмой строке выведите все символы в обратном порядке.
#В восьмой строке выведите все символы строки через один в обратном порядке, начиная с последнего.
#В девятой строке выведите длину данной строки.
#
#s[i:j:k]
#
###
#s='Abrakadabra'
#1
#print(s[2])
#2
#print(s[-2])
#3
#print(s[:5])
#4
#print(s[0:-2])
#5
#print(s[::2])
#6
#print(s[1::2])
#7
#print(s[::-1])
#8
#print(s[::-2])
#9
#print(len(s))
###
#
#3.4 Поиск подстрок в строке
#
#s=input()
#substring=input()
#print(substring in s)
#
#найти вхождение подстроки в строку
#pos=s.find(substring)
#вывести все начиная с подстроки
#print(s[pos:])
#подсчет количества вхождений подстроки в строку
#cnt=s.count(substring)
#Найти все позиции вхождения подстроки в строку
#нашли-отрезали строку начиная с подстроки-опять ищем
#Но это нечеловеческий вариант
###
#s=input()
#subs=input()
#pos=s.find(subs)
#sumpos=0
#while pos!=-1:
#    sumpos+=pos
#    print(sumpos)
#    sumpos+=len(subs)
#    s=s[pos+len(subs):]
#    pos=s.find(subs)
###
#
#Вася интересуется тем, что о нем пишут в интернете. Поэтому он хочет проверить, упоминается ли подстрока Vasya (именно с большой буквы) в строке.
#Вводится строка. Выведите True если в ней есть хотя бы одна подстрока Vasya и False в противном случае.
###
#s=input()
#print('True') if s.count('Vasya')>0 else print('False')
###
#Дана строка. Если в этом числе буква f встречается только один раз, выведите её индекс. Если она встречается два и более раз, выведите индекс её первого и последнего появления через пробел. Если буква f в данной строке не встречается, ничего не выводите.
#Для решения задачи могут быть полезны методы:
#string.find(substring) - возвращает позицию самого левого вхождения подстроки substring в строку string или -1, если подстрока не найдена
#string.rfind(substring) - возвращает позицию самого правого вхождения подстроки substring в строку string или -1, если подстрока не найдена
###
#s=input()
#symbol=input()
#cnt=s.count(symbol)
#if cnt==1:
#    print(s.find(symbol))
#elif cnt>1:
#    print(s.find(symbol),s.rfind(symbol))
###
#Дана строка, состоящая из слов, разделенных пробелами. Определите, сколько в ней слов.
#Гарантируется, что в строке не встречается несколько пробелов подряд.
#Подсказка: у строк есть полезный метод count, а количество слов напрямую связано с количеством пробелов, их разделяющих
###
#s=input()
#print(s.count(' ')+1)
###
#
#3.5 Поиск и замена подстрок
#Найти все позиции вхождения подстроки в строку
#Более простое решение
#s=input()
#subs=input()
#pos=s.find(subs)
#while pos!=-1:
#    print(pos)
#    pos=s.find(subs,pos+len(subs))
###
#Замена подстрок
#Заменить вхождения "Вася" на "Петя" в строке
#s=input()
#subs=input()
#pos=s.find(subs)
#start=s[:pos]#отрезаем все до начала вхождения
#finish=s[pos+len(subs):]
#news=start+'Petya'+finish
#print(news)
###
#Оно же на встроенной функции replace
#s=input()
#s1=s.replace('Vasya','Petya',<количество замен>)
#print(s1)

#В введенной строке необходимо заменить все буквы A на B, а все буквы C - на D. Заменять нужно только заглавные буквы.
###
#s=input()
#s=s.replace('A','B')
#s=s.replace('C','D')
#print(s)
###
#s='ABABAC'
#s1=''
#i=0
#while i<len(s):
#    if s[i]=='A':
#        s1+='B'
#    elif s[i]=='B':
#        s1+='A'
#    else:
#        s1+=s[i]
#    i+=1
#print(s1)
###
#
# 3.6 Полезные методы строк
#
#capitalize делает 1 букву большой
#endswith и startswith
#isalnum, isdecimal, ...
#lower,upper
#strip обрезка (trim) lstrip, rstrip
#
#В первой строке задается строка string
#Во второй строке задается строка substring
#Выведите True, если строка string начинается с подстроки substring, и False в противном случае
#Подсказка: для этого есть готовый метод
###
#s=input()
#subs=input()
#print(s.startswith(subs))
###
#Дана строка. Замените в этой строке все появления буквы h на букву H, кроме первого и последнего вхождения.
###
#s='In the hole in the ground there lived a hobbit'
#if s.count('h')>2:
#    s1=s[s.find('h')+1:s.rfind('h')-1]
#    s1=s1.replace('h','H')
#s2=s[:s.find('h')+1]+s1+s[s.rfind('h')-1:]
#print(s2)
#Второй вариант тут же
##s = input()
#a = s[:s.find('h') + 1]
#b = s[s.find('h') + 1:s.rfind('h')]
#c = s[s.rfind('h'):]
#s = a + b.replace('h', 'H') + c
#print(s)
#print(s2==s)
###
#В форме интернет-магазина пользователю нужно ввести свой номер телефона. Номер телефона состоит из 10 цифр, однако некоторые пользователи вводят его в формате +7123456789, некоторые - 8123456789, а некоторые и вовсе вводят только 9 цифр (без первой) 123456789.
#Вам необходимо привести номер к стандарту +7123456789
#
###
#Проверку на корректность они не требуют
#s=input()
#out=''
#if len(s)==9:
#    out='+7'+s
#elif len(s)==10 and s.startswith('8'):
#    out=s.replace('8','+7',1)
#elif len(s)==11 and s.startswith('+7'):
#    out=s
##print(s, len(s), s.isdigit())
#print(out)