#4 Цикл for, списки и функции
#4.1 Кортежи tuple
a=(1,2,3)
b=(4,5,6)
print(a+b)#(1,2,3,4,5,6) новый кортеж
print(a[1])#2
print(a[1:2])#срез из одного элемента даст кортеж (2,)  - синглтон, singleton
#Используется для хранения сложных структур
a1=("Ivan","Ivanov",29)
#Может быть кортеж из кортежей
a=((1,2),3.4,"Ivanov")
print(a[0][1])#выведет 2, 2ой элемент 1ого элемента
#Длина кортежа
print(len(a))
#Создание кортежа без скобок
a=1
b=2
c=3
#Упаковка кортежа
myTuple=a,b,c
print(myTuple)#(1,2,3)
#Распаковка кортежа
d,e,f=myTuple
print(d,e,f)#1 2 3
#если переменных будет меньше или больше, чем размер кортежа, то будет ошибка
#с помощью кортежа можно поменять местами значения
a=1
b=2
a,b=b,a#одновременная упаковка и распаковка
print(a,b)#2 1

#4.1
#range(n) - числа до n-1
#range(m,n) - от m до n-1
#range(m,n,k) - от m до n с шагом k
#Вывести положительные нечетные числа от 0 до 100
#print(tuple(range(1,101,2)))
#Цикл for
#Перебираем цвет яблок и выводим
#for color in ('red','green','yellow'):
#    print(color,' apple')
#Вывести нечетные числа от 1 до 100
#for i in range(1,101,2):
#    print(i)
#Просто вывести что-то N раз
#for i in range(10):
#    print('abc')
#Таблица умножения
#for i in range(1,11):
#    for j in range(1,11):
#        if i*j<10:
#            print(' ',end='')
#        print(i*j,end=' ')
#    print()
#
#Вводится целое положительное число N. Выведите все числа по убыванию от N до 1 включительно через пробел.
###
print()
print('N .. 1')
n=int(input())
for i in range(n,0,-1):
    print(i,end=' ')
###
#Вводится число целое положительное число N. Напечатайте все N-значные нечетные целые положительные числа в порядке убывания.
#Подсказка: Вспомнмте про возведение 10 в степень.
###
print()
print('10^n -> 10^(n-1)')
n=int(input())
for i in range(10**n-1,10**(n-1)-1,-2):
    if i%2>0:
        print(i,end=' ')
###
#По введенному целому положительному числу N посчитайте N! (N факториал)
###
print()
print('N!')
n=int(input())
res=1
for i in range(1,n+1):
    res*=i
print(res)
###
#По введенному целому положительному N вычислите сумму 1! + 2! + 3! + ... + N!
###
print()
print('1! + 2! + 3! + ... + N!')
n=int(input())
res=1
sum=0
for i in range(1,n+1):
    res*=i
    sum+=res
print(sum)
###
#
#4.3 Списки
#Если мы хотим изменить элемент кортежа, у нас это не получится
#a=(1,2,3)
#a[1]=5#не получится
#Кортеж не меняется, нам нужен список
#a=[1,2,3]
#a[0]=5
#Также можно брать срезы
#Списки складываются
#b=[4,5,6]
#print(a+b)#[1,2,3,4,5,6]
#если сделать так:
#b=a
#a[0]=5
#print(b)#в b тоже поменяется 0-ой элемент
#a и b - это два указателя на один и тот же список
#b=a.copy#копирование списка
#b=a[:]#или так, срез - это всегда новый объект
#a=[1,2]
#b=a
#a=[3,4]
#print(a,b)#выдаст [3,4] [1,2], то есть b уже не равно а, а - это новый объект
#Добавление в список с 1 по n первых чисел, n вводим с клавиатуры
#a=[]
#n=int(input())
#Либо функцией list прверащаем range в список
#a=list(range(1,n+1))
#print(a)
#если вводим n чисел с клавиатуры
#x=int(input())
#a=[]
#while x!=0:#0 - конец ввода
#    a=a+[x]
#    x=int(input())
#print(x)
#это медленно, т.к. каждый раз конструируется новый объект
#надо через append
#x=int(input())
#a=[]
#while x!=0:#0 - конец ввода
#    a=a.append(x)
#    x=int(input())
#print(x)
#print(x[::-1])#или наоборот
#
#Вводится строка, состоящая из слов, разделенных одним пробелом. Выведите все слова по одному в строке (пробелы выводить не нужно).
#Эта задача удобно решается с помощью методов split и join. Напомним, что перевод строки обозначается с помщью \n внутри строковой константы.
###
#s=input()
s='First second third'
for i in s.split():
    print(i)
###
#В первой строке вводится строка-разделитель.
#Во второй строке вводится текст, состоящий из слов, разделенных пробелом.
#Выведите слова из текста, разделяя их строкой-разделителем.
###
print('#Enter separator then set of characters via space')
separ=input()
s=input()
s=list(s.split(sep=' '))
print(separ.join(s))
###
#
#4.4 Чтение списков
#
#ВВести список как ряд чисел через пробел
print()
print('4.4')
print('Ввести список как ряд чисел через пробел')
#print('ab cd    ef'.split())
#Сплит даст строки, можно сразу их перевести в числа функцией map (без цикла for)
#map выдаст объект <map object>, превратим его в список функцией list
a=list(map(int,input().split()))
#список выведем развернутым задом наперед
print(a[::-1])
#Если надо вывести элементы списка через пробел, без скобок[]
print(*a[::-1])
#ввести слова через пробел, вывести слова через запятую пробел (, ). (* выдаст только через пробел!)
print('вывести числа через запятую с пробелом')
#join рабоает только со строками! делаем map str
print(', '.join(list(map(str,a))))
#Объект <map object> позволяет поочередно вынимать из себя элементы, необязательно для join
#применять функцию list
#
#Выведите все элементы списка с четными индексами (то есть A[0], A[2], A[4], ...). Постарайтесь не использовать if, а придумать правильные параметры для range.
###
print()
print('Выведите все элементы списка с четными индексами (то есть A[0], A[2], A[4], ...)')
a=[0,1,2,3,4,5,6]
#a=list(map(int,input().split()))
for i in range(0,len(a),2):
    print(a[i],end=' ')
###
#
#Выведите все четные элементы списка
print()
print('Выведите все четные элементы списка')
a=[1,2,2,3,3,3,4]
#a=list(map(int,input().split()))
for i in a:
    if i%2==0:
        print(i,end=' ')
###
#Дан список чисел. Выведите значение наибольшего элемента в списке, а затем индекс этого элемента в списке. Если наибольших элементов несколько, выведите индекс первого из них.
###
print()
print('Выведите значение наибольшего элемента в списке, а затем индекс этого элемента в списке.')
a='1 2 3 2 1'
a=list(map(int,a.split()))
amax=a[0]
cmax=0
j=0
for i in a:
    if amax<i:
        amax=i
        cmax=j
    j+=1
print(amax,cmax,sep=' ')
###
#
#Дан список чисел. Выведите все элементы списка, которые больше предыдущего элемента.
####
print()
print('Дан список чисел. Выведите все элементы списка, которые больше предыдущего элемента.')
a='1 5 2 4 3'
a=list(map(int,a.split()))
prev=a[0]
for i in a:
    if i>prev:
        print(i,end=' ')
    prev=i
###
#
#Дан список чисел. Определите, сколько в этом списке элементов, которые больше двух своих соседей и выведите количество таких элементов.
print()
print('Сколько элементов списка больше своих соседей')
a='1 5 1 5 1'
a=list(map(int,a.split()))
counter = 0
for i in range(1, len(a) - 1):
    # о боги, разве так можно писать?
    if a[i - 1] < a[i] > a[i + 1]:
        counter += 1
print(counter)
###
#
#Выведите значение наименьшего из всех положительных элементов в списке.
#Известно, что в списке есть хотя бы один положительный элемент, а значения всех элементов списка по модулю не превосходят 1000.
###
print()
print('Выведите значение наименьшего из всех положительных элементов в списке')
a='5 -4 3 -2 1'
a=list(map(int,a.split()))
amin=1000
for i in a:
    if i>0 and amin>i:
        amin=i
print(amin)
###
#
#Функции
#
#Функция, печатающая списки через запятую
print()
print('Функция, печатающая списки через запятую')
def printList(myList):
    print(', '.join(tuple(map(str,myList))))
a=[1,2,3]
printList(a)
#
#Дебаггер:
#Step into - заходит в функции
#Step over - не заходит в функции
#
#
#Факториал через функцию
print('Факториал!')
def factorial(n):
    ans=1
    for i in range (2,n+1):
        ans*=i
    return ans
print(factorial(6))
#
#
#В списке все элементы различны. Поменяйте местами минимальный и максимальный элемент этого списка.
#Sample Input:
#3 4 5 2 1
#Sample Output:
#3 4 1 2 5
#
###
print()
print('Ввести список через пробел. Поменяем в нем минимальный и максимальный элемент')
def getNumList(myList):
    res=list(map(int,myList.split()))
    return res
def findMin(myList):
    min=myList[0]
    index=0
    j=0
    for i in myList:
        if i<min:
            min=i
            index=j
        j+=1
    return min,index
def findMax(myList):
    max=myList[0]
    index=0
    j=0
    for i in myList:
        if i>max:
            max=i
            index=j
        j+=1
    return max,index
#s=getNumList(input())
s=getNumList('3 4 5 2 1')
print(f"Initial list is:{' '.join(map(str,s))}")
minElement,minIndex=findMin(s)
maxElement,maxIndex=findMax(s)
#print(f'Min element {minElement} at index {minIndex}')
#print(f'Max element {maxElement} at index {maxIndex}')
b=s.copy()
b[minIndex]=maxElement
b[maxIndex]=minElement
print(*b)
###
#
#Разбиение программы на функции
#
#В комбинаторике сочетанием из n по k называется набор k элементов, выбранных из данного множества, содержащего n различных элементов (См. Треугольник Паскаля)
#Cnk=n!/((n-k)!*k!)
#используем уже имеющуюся функцию factorial
#Т.е вызовем функцию из другой функции
###
print()
print('Выборка из n по k')
def cnk(n,k):
    return factorial(n)//(factorial(k)*factorial(n-k))
n=int(input('Enter n: '))
k=int(input('Enter k: '))
print(cnk(n,k))
###
#
#Напишите функцию xor(x, y) реализующую функцию "Исключающее ИЛИ" двух логических переменных x и y.
#Функция xor должна возвращать True, если ровно один из ее аргументов x или y, но не оба одновременно равны True.
#Воспользуйтесь этой функцией для решения задачи.
#Вводится 2 числа - x и y (x и y равны 0 или 1, 0 соответствует значению False, 1 соответствует значению True).
#Необходимо вывести 0 или 1 - значение функции xor от x и y
###
print()
print('Поxorим введенные числа')
x=int(input('Enter x (0 or 1): '))
y=int(input('Enter y (0 or 1): '))
def xor(x,y):
    res=False
    if x!=y:
        res=True
    return res
print(xor(x,y))
###
#считать два числа через пробел:
#a,b =map(int,input().split())
#Вернуть большее из двух введенных через пробел чисел
print()
print('Вернуть большее из двух введенных через пробел чисел')
def max2(a,b):
    if a>b:
        return a
    return b #Два return-a - ТАК ТОЖЕ КОРРЕКТНО!
a,b =map(int,input().split())
print(max2(a,b))
###
#
#Использование return в необычных случаях
#
#Найти максимум из 3 чисел
#Функция max2 для двух чисел у нас уже есть
###
print()
print('Maximum из 3 чисел, введенных через пробел')
def max3(a,b,c):
    return max2(max2(a,b),c)
c,d,e=map(int,input().split())
print(max3(c,d,e))
#
#Упорядочить два числа
#
###
print()
print('Упорядочить два числа, введенных через пробел')
def sort2(a,b):
    if a<b:
        return a,b#Кортеж!
    return b,a
x,y=map(int,input().split())
print(*sort2(x,y))
###
#Можно ввозвращать произвольное количество переменных кортежем, на выходе надо смотреть длину кортежа и в зависимости от нее обрабатывать результат
#
#Четное ли число
###
print()
print('Четное ли число 4 и 5')
def isEven(a):
    return n%2==0
print(isEven(4),isEven(5))
x=int(input('Enter number: '))
if isEven(x):
    print('Even')
else:
    print('Odd')
###

#Даны два действительных числа x и y. Проверьте, принадлежит ли точка с координатами (x,y) #заштрихованному квадрату (включая его границу). Если точка принадлежит квадрату, выведите #слово YES, иначе выведите слово NO. На рисунке сетка проведена с шагом 1.
#Рисунок - квадрат с центром в (0,0) и вершинами в (1,1), (1,-1),(-1,-1),(-1,1)
#Решение должно содержать функцию isPointInSquare(x, y), возвращающую True, если точка принадлежит квадрату и False, если не принадлежит. Основная программа должна считать координаты точки, вызвать функцию isPointInSquare и в зависимости от возвращенного значения вывести на экран необходимое сообщение. Функция isPointInSquare не должна содержать инструкцию if.
#Вводятся два действительных числа.
#Выведите ответ на задачу.
#
print()
print('Квадрат')
def  isPointInSquare(x, y):
    return -1<=x<=1 and -1<=y<=1
x=float(input('Enter x: '))
y=float(input('Enter y: '))
print('YES') if isPointInSquare(x,y) else print('NO')
###
#
#Напишите функцию sort3, которая принимает 3 параметра a, b, c, переставляет их так,
# чтобы a<=b<=c и возвращает тройку чисел a, b, c.
#Дано три числа по одному в строке. Воспользуйтесь функцией sort3 чтобы упорядочить эти три числа.
###
print()
print('Сортировка')
def sort3(x,y,z):
    a=[x,y,z]
    for i in range(len(a)-1):
        for j in range(len(a)-i-1):
            if a[j]>a[j+1]:
                a[j],a[j+1]=a[j+1],a[j]
    print(*a)
a=int(input('Enter x: '))
b=int(input('Enter y: '))
c=int(input('Enter z: '))
sort3(a,b,c)
#

